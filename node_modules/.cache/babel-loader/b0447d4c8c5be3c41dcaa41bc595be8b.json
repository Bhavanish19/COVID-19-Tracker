{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\Covid-Tracker-19-master\\\\src\\\\components\\\\Chart\\\\Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchtDataDaily } from '../../API';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  dataChart,\n  countryChart\n}) => {\n  //hook. It's like self declaring state with field dailyData, but also get a setter of setDailyData\n  const [dailyData, setDailyData] = useState([]); //useEffect(async()=>{}) doesnt exist\n  //empty array so that it doesnt reload all the time\n\n  useEffect(() => {\n    const fetchAPIdaily = async () => {\n      //return of async function is a promise, not object or anything\n      setDailyData((await fetchtDataDaily()));\n    };\n\n    fetchAPIdaily();\n  }, []); //purposefully lowercase since uppercase is reserved for export\n\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        reportDate\n      }) => reportDate),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: 'lawngreen',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  }) : null;\n  const barChart = dataChart.confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['turquoise', 'greenyellow', 'orangered'],\n        data: [dataChart.confirmed.value, dataChart.recovered.value, dataChart.deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in $(countryChart)`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, countryChart ? barChart : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["D:/react/Covid-Tracker-19-master/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchtDataDaily","Line","Bar","styles","Chart","dataChart","countryChart","dailyData","setDailyData","fetchAPIdaily","lineChart","length","labels","map","reportDate","datasets","data","confirmed","label","borderColor","fill","deaths","backgroundColor","barChart","value","recovered","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,eAAR,QAA8B,WAA9B;AACA,SAAQC,IAAR,EAAcC,GAAd,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAGA,MAAMC,KAAK,GAAC,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAAD,KAA6B;AACrC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA0BV,QAAQ,CAAC,EAAD,CAAxC,CAFqC,CAIrC;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMU,aAAa,GAAC,YAAS;AACzB;AACAD,MAAAA,YAAY,EAAC,MAAMR,eAAe,EAAtB,EAAZ;AACH,KAHD;;AAIAS,IAAAA,aAAa;AAChB,GANQ,EAMN,EANM,CAAT,CANqC,CAcrC;;AACA,QAAMC,SAAS,GACVH,SAAS,CAACI,MAAX,gBACC,oBAAC,IAAD;AACG,IAAA,IAAI,EAAE;AACNC,MAAAA,MAAM,EAACL,SAAS,CAACM,GAAV,CAAc,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAgBA,UAA9B,CADD;AAENC,MAAAA,QAAQ,EAAC,CAAC;AACNC,QAAAA,IAAI,EAACT,SAAS,CAACM,GAAV,CAAc,CAAC;AAACI,UAAAA;AAAD,SAAD,KAAeA,SAA7B,CADC;AAENC,QAAAA,KAAK,EAAE,UAFD;AAGNC,QAAAA,WAAW,EAAE,WAHP;AAINC,QAAAA,IAAI,EAAE;AAJA,OAAD,EAKP;AACEJ,QAAAA,IAAI,EAACT,SAAS,CAACM,GAAV,CAAc,CAAC;AAACQ,UAAAA;AAAD,SAAD,KAAYA,MAA1B,CADP;AAEEH,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEG,QAAAA,eAAe,EAAE,sBAJnB;AAKEF,QAAAA,IAAI,EAAE;AALR,OALO;AAFH,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAiBK,IAlBT;AAqBA,QAAMG,QAAQ,GACVlB,SAAS,CAACY,SAAV,gBAEI,oBAAC,GAAD;AACA,IAAA,IAAI,EAAE;AAACL,MAAAA,MAAM,EAAC,CAAC,UAAD,EAAY,WAAZ,EAAwB,QAAxB,CAAR;AACNG,MAAAA,QAAQ,EAAC,CAAC;AACNG,QAAAA,KAAK,EAAE,QADD;AAENI,QAAAA,eAAe,EAAC,CAAC,WAAD,EAAa,aAAb,EAA2B,WAA3B,CAFV;AAGNN,QAAAA,IAAI,EAAC,CAACX,SAAS,CAACY,SAAV,CAAoBO,KAArB,EAA4BnB,SAAS,CAACoB,SAAV,CAAoBD,KAAhD,EAAuDnB,SAAS,CAACgB,MAAV,CAAiBG,KAAxE;AAHC,OAAD;AADH,KADN;AAOA,IAAA,OAAO,EAAE;AACLE,MAAAA,MAAM,EAAC;AAACC,QAAAA,OAAO,EAAC;AAAT,OADF;AAELC,MAAAA,KAAK,EAAE;AAACD,QAAAA,OAAO,EAAC,IAAT;AAAeE,QAAAA,IAAI,EAAG;AAAtB;AAFF,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,GAcE,IAfN;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAE1B,MAAM,CAAC2B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCxB,YAAY,GAACiB,QAAD,GAAUb,SADvB,CADJ;AAKH,CA3DD;;AA4DA,eAAeN,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {fetchtDataDaily} from '../../API';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\n\nconst Chart=({dataChart, countryChart})=>{\n    //hook. It's like self declaring state with field dailyData, but also get a setter of setDailyData\n    const [dailyData, setDailyData]=useState([]);\n    \n    //useEffect(async()=>{}) doesnt exist\n    //empty array so that it doesnt reload all the time\n    useEffect(()=>{\n        const fetchAPIdaily=async()=>{\n            //return of async function is a promise, not object or anything\n            setDailyData(await fetchtDataDaily());\n        };\n        fetchAPIdaily();\n    }, []);\n\n    //purposefully lowercase since uppercase is reserved for export\n    const lineChart=(\n        (dailyData.length)?\n        (<Line \n            data={{\n            labels:dailyData.map(({reportDate})=>reportDate),\n            datasets:[{\n                data:dailyData.map(({confirmed})=>confirmed),\n                label: 'Infected',\n                borderColor: 'lawngreen',\n                fill: true,\n            },{\n                data:dailyData.map(({deaths})=>deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n            }],\n        }}/>)\n            :null\n    );\n\n    const barChart=(\n        dataChart.confirmed?\n        (\n            <Bar \n            data={{labels:['Infected','Recovered','Deaths'],\n            datasets:[{\n                label: 'People',\n                backgroundColor:['turquoise','greenyellow','orangered'],\n                data:[dataChart.confirmed.value, dataChart.recovered.value, dataChart.deaths.value]\n            }]}}\n            options={{\n                legend:{display:false},\n                title: {display:true, text: `Current State in $(countryChart)`}\n            }}/>\n            \n        ):null\n    )\n\n    return(\n        <div className={styles.container}>\n        {countryChart?barChart:lineChart}\n        </div>\n    )\n}\nexport default Chart;"]},"metadata":{},"sourceType":"module"}