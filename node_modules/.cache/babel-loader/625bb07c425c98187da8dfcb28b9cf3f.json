{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\Covid-Tracker-19-master\\\\src\\\\components\\\\CountryPicker\\\\CountryPicker.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../API';\n\nconst CountryPicker = ({\n  handleCountryChange\n}) => {\n  const [countriesData, setCountriesData] = useState([]); //useEffect(async()=>{}) doesnt exist\n  //if no second argument, useEffect is going to run endlessly\n  //if argument provide, only run when second argument change\n\n  useEffect(() => {\n    const fetchAPIcountries = async () => {\n      //return of async function is a promise, not object or anything\n      //dont forget the () at await\n      setCountriesData((await fetchCountries()));\n    };\n\n    fetchAPIcountries();\n  }, [setCountriesData]);\n  return /*#__PURE__*/React.createElement(FormControl, {\n    className: styles.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NativeSelect, {\n    defaultValue: \"\",\n    onChange: e => handleCountryChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, \"Global\"), countriesData.map((country, id) => /*#__PURE__*/React.createElement(\"option\", {\n    value: country.countryName,\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 51\n    }\n  }, country.countryName))));\n};\n\nexport default CountryPicker;","map":{"version":3,"sources":["D:/react/Covid-Tracker-19-master/src/components/CountryPicker/CountryPicker.jsx"],"names":["React","useState","useEffect","NativeSelect","FormControl","styles","fetchCountries","CountryPicker","handleCountryChange","countriesData","setCountriesData","fetchAPIcountries","formControl","e","target","value","map","country","id","countryName"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,mBAAxC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAAQC,cAAR,QAA6B,WAA7B;;AACA,MAAMC,aAAa,GAAC,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAyB;AACzC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAkCT,QAAQ,CAAC,EAAD,CAAhD,CADyC,CAGzC;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMS,iBAAiB,GAAC,YAAS;AAC7B;AACA;AACAD,MAAAA,gBAAgB,EAAC,MAAMJ,cAAc,EAArB,EAAhB;AACH,KAJD;;AAMAK,IAAAA,iBAAiB;AACpB,GARQ,EAQP,CAACD,gBAAD,CARO,CAAT;AASA,sBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEL,MAAM,CAACO,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,YAAY,EAAC,EAA3B;AAA8B,IAAA,QAAQ,EAAGC,CAAD,IAAKL,mBAAmB,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKN,aAAa,CAACO,GAAd,CAAkB,CAACC,OAAD,EAAUC,EAAV,kBAAe;AAAQ,IAAA,KAAK,EAAGD,OAAO,CAACE,WAAxB;AAAqC,IAAA,GAAG,EAAED,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CD,OAAO,CAACE,WAAvD,CAAjC,CAFL,CADJ,CADJ;AAQH,CAvBD;;AAwBA,eAAeZ,aAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../API';\nconst CountryPicker=({handleCountryChange})=>{\n    const [countriesData, setCountriesData]=useState([]);\n    \n    //useEffect(async()=>{}) doesnt exist\n    //if no second argument, useEffect is going to run endlessly\n    //if argument provide, only run when second argument change\n    useEffect(()=>{\n        const fetchAPIcountries=async()=>{\n            //return of async function is a promise, not object or anything\n            //dont forget the () at await\n            setCountriesData(await fetchCountries());\n        };\n        \n        fetchAPIcountries();\n    },[setCountriesData]);\n    return(\n        <FormControl className={styles.formControl}> \n            <NativeSelect defaultValue='' onChange={(e)=>handleCountryChange(e.target.value)}>\n                <option value=''>Global</option>\n                {countriesData.map((country, id)=><option value= {country.countryName} key={id}>{country.countryName}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\nexport default CountryPicker;"]},"metadata":{},"sourceType":"module"}